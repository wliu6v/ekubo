type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type u128 = u128 [storable: true, drop: true, dup: true, zero_sized: false];
type NonZero<u128> = NonZero<u128> [storable: true, drop: true, dup: true, zero_sized: false];
type Tuple<NonZero<u128>> = Struct<ut@Tuple, NonZero<u128>> [storable: true, drop: true, dup: true, zero_sized: false];
type core::panics::Panic = Struct<ut@core::panics::Panic> [storable: true, drop: true, dup: true, zero_sized: true];
type Array<felt252> = Array<felt252> [storable: true, drop: true, dup: false, zero_sized: false];
type Tuple<core::panics::Panic, Array<felt252>> = Struct<ut@Tuple, core::panics::Panic, Array<felt252>> [storable: true, drop: true, dup: false, zero_sized: false];
type core::panics::PanicResult::<(core::zeroable::NonZero::<core::integer::u128>,)> = Enum<ut@core::panics::PanicResult::<(core::zeroable::NonZero::<core::integer::u128>,)>, Tuple<NonZero<u128>>, Tuple<core::panics::Panic, Array<felt252>>> [storable: true, drop: true, dup: false, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type NonZero<felt252> = NonZero<felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type Tuple<u128, u128> = Struct<ut@Tuple, u128, u128> [storable: true, drop: true, dup: true, zero_sized: false];
type U128MulGuarantee = U128MulGuarantee [storable: true, drop: false, dup: false, zero_sized: false];
type core::option::Option::<core::zeroable::NonZero::<core::integer::u128>> = Enum<ut@core::option::Option::<core::zeroable::NonZero::<core::integer::u128>>, NonZero<u128>, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type Tuple<core::option::Option::<core::zeroable::NonZero::<core::integer::u128>>> = Struct<ut@Tuple, core::option::Option::<core::zeroable::NonZero::<core::integer::u128>>> [storable: true, drop: true, dup: true, zero_sized: false];
type core::panics::PanicResult::<(core::option::Option::<core::zeroable::NonZero::<core::integer::u128>>,)> = Enum<ut@core::panics::PanicResult::<(core::option::Option::<core::zeroable::NonZero::<core::integer::u128>>,)>, Tuple<core::option::Option::<core::zeroable::NonZero::<core::integer::u128>>>, Tuple<core::panics::Panic, Array<felt252>>> [storable: true, drop: true, dup: false, zero_sized: false];
type core::option::Option::<core::integer::u128> = Enum<ut@core::option::Option::<core::integer::u128>, u128, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type core::result::Result::<core::integer::u128, core::integer::u128> = Enum<ut@core::result::Result::<core::integer::u128, core::integer::u128>, u128, u128> [storable: true, drop: true, dup: true, zero_sized: false];
type core::bool = Enum<ut@core::bool, Unit, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type ekubo::types::i129::i129 = Struct<ut@ekubo::types::i129::i129, u128, core::bool> [storable: true, drop: true, dup: true, zero_sized: false];
type Tuple<ekubo::types::i129::i129> = Struct<ut@Tuple, ekubo::types::i129::i129> [storable: true, drop: true, dup: true, zero_sized: false];
type core::panics::PanicResult::<(ekubo::types::i129::i129,)> = Enum<ut@core::panics::PanicResult::<(ekubo::types::i129::i129,)>, Tuple<ekubo::types::i129::i129>, Tuple<core::panics::Panic, Array<felt252>>> [storable: true, drop: true, dup: false, zero_sized: false];
type Tuple<u128> = Struct<ut@Tuple, u128> [storable: true, drop: true, dup: true, zero_sized: false];
type core::panics::PanicResult::<(core::integer::u128,)> = Enum<ut@core::panics::PanicResult::<(core::integer::u128,)>, Tuple<u128>, Tuple<core::panics::Panic, Array<felt252>>> [storable: true, drop: true, dup: false, zero_sized: false];
type Tuple<ekubo::types::i129::i129, ekubo::types::i129::i129> = Struct<ut@Tuple, ekubo::types::i129::i129, ekubo::types::i129::i129> [storable: true, drop: true, dup: true, zero_sized: false];
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type ekubo::types::call_points::CallPoints = Struct<ut@ekubo::types::call_points::CallPoints, core::bool, core::bool, core::bool, core::bool, core::bool> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;
libfunc struct_construct<ekubo::types::call_points::CallPoints> = struct_construct<ekubo::types::call_points::CallPoints>;
libfunc store_temp<ekubo::types::call_points::CallPoints> = store_temp<ekubo::types::call_points::CallPoints>;
libfunc dup<u128> = dup<u128>;
libfunc snapshot_take<u128> = snapshot_take<u128>;
libfunc drop<u128> = drop<u128>;
libfunc u128_const<0> = u128_const<0>;
libfunc rename<u128> = rename<u128>;
libfunc u128_eq = u128_eq;
libfunc branch_align = branch_align;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc jump = jump;
libfunc bool_not_impl = bool_not_impl;
libfunc bool_and_impl = bool_and_impl;
libfunc struct_construct<ekubo::types::i129::i129> = struct_construct<ekubo::types::i129::i129>;
libfunc store_temp<ekubo::types::i129::i129> = store_temp<ekubo::types::i129::i129>;
libfunc struct_deconstruct<ekubo::types::i129::i129> = struct_deconstruct<ekubo::types::i129::i129>;
libfunc snapshot_take<core::bool> = snapshot_take<core::bool>;
libfunc enum_match<core::bool> = enum_match<core::bool>;
libfunc drop<Unit> = drop<Unit>;
libfunc rename<core::bool> = rename<core::bool>;
libfunc u128_overflowing_sub = u128_overflowing_sub;
libfunc struct_construct<Tuple<ekubo::types::i129::i129, ekubo::types::i129::i129>> = struct_construct<Tuple<ekubo::types::i129::i129, ekubo::types::i129::i129>>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<Tuple<ekubo::types::i129::i129, ekubo::types::i129::i129>> = store_temp<Tuple<ekubo::types::i129::i129, ekubo::types::i129::i129>>;
libfunc struct_deconstruct<Tuple<ekubo::types::i129::i129, ekubo::types::i129::i129>> = struct_deconstruct<Tuple<ekubo::types::i129::i129, ekubo::types::i129::i129>>;
libfunc drop<core::bool> = drop<core::bool>;
libfunc store_temp<u128> = store_temp<u128>;
libfunc function_call<user@core::integer::U128Sub::sub> = function_call<user@core::integer::U128Sub::sub>;
libfunc enum_match<core::panics::PanicResult::<(core::integer::u128,)>> = enum_match<core::panics::PanicResult::<(core::integer::u128,)>>;
libfunc struct_deconstruct<Tuple<u128>> = struct_deconstruct<Tuple<u128>>;
libfunc enum_init<core::panics::PanicResult::<(ekubo::types::i129::i129,)>, 1> = enum_init<core::panics::PanicResult::<(ekubo::types::i129::i129,)>, 1>;
libfunc store_temp<core::panics::PanicResult::<(ekubo::types::i129::i129,)>> = store_temp<core::panics::PanicResult::<(ekubo::types::i129::i129,)>>;
libfunc function_call<user@core::integer::U128Add::add> = function_call<user@core::integer::U128Add::add>;
libfunc struct_construct<Tuple<ekubo::types::i129::i129>> = struct_construct<Tuple<ekubo::types::i129::i129>>;
libfunc enum_init<core::panics::PanicResult::<(ekubo::types::i129::i129,)>, 0> = enum_init<core::panics::PanicResult::<(ekubo::types::i129::i129,)>, 0>;
libfunc function_call<user@ekubo::types::i129::i129_add> = function_call<user@ekubo::types::i129::i129_add>;
libfunc enum_match<core::panics::PanicResult::<(ekubo::types::i129::i129,)>> = enum_match<core::panics::PanicResult::<(ekubo::types::i129::i129,)>>;
libfunc struct_deconstruct<Tuple<ekubo::types::i129::i129>> = struct_deconstruct<Tuple<ekubo::types::i129::i129>>;
libfunc function_call<user@core::integer::U128Mul::mul> = function_call<user@core::integer::U128Mul::mul>;
libfunc bool_xor_impl = bool_xor_impl;
libfunc function_call<user@core::integer::U128Div::div> = function_call<user@core::integer::U128Div::div>;
libfunc dup<ekubo::types::i129::i129> = dup<ekubo::types::i129::i129>;
libfunc function_call<user@core::traits::PartialEqSnap::<core::integer::u128, core::integer::U128PartialEq>::eq> = function_call<user@core::traits::PartialEqSnap::<core::integer::u128, core::integer::U128PartialEq>::eq>;
libfunc function_call<user@core::traits::PartialEqSnap::<core::bool, core::BoolPartialEq>::eq> = function_call<user@core::traits::PartialEqSnap::<core::bool, core::BoolPartialEq>::eq>;
libfunc bool_or_impl = bool_or_impl;
libfunc dup<core::bool> = dup<core::bool>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc snapshot_take<ekubo::types::i129::i129> = snapshot_take<ekubo::types::i129::i129>;
libfunc function_call<user@ekubo::types::i129::i129_gt> = function_call<user@ekubo::types::i129::i129_gt>;
libfunc enum_init<core::result::Result::<core::integer::u128, core::integer::u128>, 0> = enum_init<core::result::Result::<core::integer::u128, core::integer::u128>, 0>;
libfunc store_temp<core::result::Result::<core::integer::u128, core::integer::u128>> = store_temp<core::result::Result::<core::integer::u128, core::integer::u128>>;
libfunc enum_init<core::result::Result::<core::integer::u128, core::integer::u128>, 1> = enum_init<core::result::Result::<core::integer::u128, core::integer::u128>, 1>;
libfunc felt252_const<39878429859763533771555484554338820190071> = felt252_const<39878429859763533771555484554338820190071>;
libfunc rename<core::result::Result::<core::integer::u128, core::integer::u128>> = rename<core::result::Result::<core::integer::u128, core::integer::u128>>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc function_call<user@core::result::ResultTraitImpl::<core::integer::u128, core::integer::u128>::expect::<core::integer::u128Drop>> = function_call<user@core::result::ResultTraitImpl::<core::integer::u128, core::integer::u128>::expect::<core::integer::u128Drop>>;
libfunc struct_construct<Tuple<u128>> = struct_construct<Tuple<u128>>;
libfunc enum_init<core::panics::PanicResult::<(core::integer::u128,)>, 0> = enum_init<core::panics::PanicResult::<(core::integer::u128,)>, 0>;
libfunc store_temp<core::panics::PanicResult::<(core::integer::u128,)>> = store_temp<core::panics::PanicResult::<(core::integer::u128,)>>;
libfunc enum_init<core::panics::PanicResult::<(core::integer::u128,)>, 1> = enum_init<core::panics::PanicResult::<(core::integer::u128,)>, 1>;
libfunc u128_overflowing_add = u128_overflowing_add;
libfunc felt252_const<39878429859757942499084499860145094553463> = felt252_const<39878429859757942499084499860145094553463>;
libfunc function_call<user@core::integer::u128_checked_mul> = function_call<user@core::integer::u128_checked_mul>;
libfunc enum_match<core::option::Option::<core::integer::u128>> = enum_match<core::option::Option::<core::integer::u128>>;
libfunc array_new<felt252> = array_new<felt252>;
libfunc felt252_const<39878429859761676908720221312622923640695> = felt252_const<39878429859761676908720221312622923640695>;
libfunc array_append<felt252> = array_append<felt252>;
libfunc struct_construct<core::panics::Panic> = struct_construct<core::panics::Panic>;
libfunc struct_construct<Tuple<core::panics::Panic, Array<felt252>>> = struct_construct<Tuple<core::panics::Panic, Array<felt252>>>;
libfunc function_call<user@core::integer::U128TryIntoNonZero::try_into> = function_call<user@core::integer::U128TryIntoNonZero::try_into>;
libfunc enum_match<core::panics::PanicResult::<(core::option::Option::<core::zeroable::NonZero::<core::integer::u128>>,)>> = enum_match<core::panics::PanicResult::<(core::option::Option::<core::zeroable::NonZero::<core::integer::u128>>,)>>;
libfunc struct_deconstruct<Tuple<core::option::Option::<core::zeroable::NonZero::<core::integer::u128>>>> = struct_deconstruct<Tuple<core::option::Option::<core::zeroable::NonZero::<core::integer::u128>>>>;
libfunc enum_match<core::option::Option::<core::zeroable::NonZero::<core::integer::u128>>> = enum_match<core::option::Option::<core::zeroable::NonZero::<core::integer::u128>>>;
libfunc u128_safe_divmod = u128_safe_divmod;
libfunc felt252_const<5420154128225384396790819266608> = felt252_const<5420154128225384396790819266608>;
libfunc enum_match<core::result::Result::<core::integer::u128, core::integer::u128>> = enum_match<core::result::Result::<core::integer::u128, core::integer::u128>>;
libfunc drop<felt252> = drop<felt252>;
libfunc u128_guarantee_mul = u128_guarantee_mul;
libfunc store_temp<U128MulGuarantee> = store_temp<U128MulGuarantee>;
libfunc function_call<user@core::integer::U128MulGuaranteeDestruct::destruct> = function_call<user@core::integer::U128MulGuaranteeDestruct::destruct>;
libfunc struct_construct<Tuple<u128, u128>> = struct_construct<Tuple<u128, u128>>;
libfunc struct_deconstruct<Tuple<u128, u128>> = struct_deconstruct<Tuple<u128, u128>>;
libfunc u128_to_felt252 = u128_to_felt252;
libfunc felt252_is_zero = felt252_is_zero;
libfunc enum_init<core::option::Option::<core::integer::u128>, 0> = enum_init<core::option::Option::<core::integer::u128>, 0>;
libfunc store_temp<core::option::Option::<core::integer::u128>> = store_temp<core::option::Option::<core::integer::u128>>;
libfunc drop<NonZero<felt252>> = drop<NonZero<felt252>>;
libfunc enum_init<core::option::Option::<core::integer::u128>, 1> = enum_init<core::option::Option::<core::integer::u128>, 1>;
libfunc function_call<user@core::integer::u128_as_non_zero> = function_call<user@core::integer::u128_as_non_zero>;
libfunc enum_match<core::panics::PanicResult::<(core::zeroable::NonZero::<core::integer::u128>,)>> = enum_match<core::panics::PanicResult::<(core::zeroable::NonZero::<core::integer::u128>,)>>;
libfunc struct_deconstruct<Tuple<NonZero<u128>>> = struct_deconstruct<Tuple<NonZero<u128>>>;
libfunc enum_init<core::option::Option::<core::zeroable::NonZero::<core::integer::u128>>, 0> = enum_init<core::option::Option::<core::zeroable::NonZero::<core::integer::u128>>, 0>;
libfunc struct_construct<Tuple<core::option::Option::<core::zeroable::NonZero::<core::integer::u128>>>> = struct_construct<Tuple<core::option::Option::<core::zeroable::NonZero::<core::integer::u128>>>>;
libfunc enum_init<core::panics::PanicResult::<(core::option::Option::<core::zeroable::NonZero::<core::integer::u128>>,)>, 0> = enum_init<core::panics::PanicResult::<(core::option::Option::<core::zeroable::NonZero::<core::integer::u128>>,)>, 0>;
libfunc store_temp<core::panics::PanicResult::<(core::option::Option::<core::zeroable::NonZero::<core::integer::u128>>,)>> = store_temp<core::panics::PanicResult::<(core::option::Option::<core::zeroable::NonZero::<core::integer::u128>>,)>>;
libfunc enum_init<core::panics::PanicResult::<(core::option::Option::<core::zeroable::NonZero::<core::integer::u128>>,)>, 1> = enum_init<core::panics::PanicResult::<(core::option::Option::<core::zeroable::NonZero::<core::integer::u128>>,)>, 1>;
libfunc u128_mul_guarantee_verify = u128_mul_guarantee_verify;
libfunc store_temp<Unit> = store_temp<Unit>;
libfunc function_call<user@core::integer::u128_try_as_non_zero> = function_call<user@core::integer::u128_try_as_non_zero>;
libfunc struct_construct<Tuple<NonZero<u128>>> = struct_construct<Tuple<NonZero<u128>>>;
libfunc enum_init<core::panics::PanicResult::<(core::zeroable::NonZero::<core::integer::u128>,)>, 0> = enum_init<core::panics::PanicResult::<(core::zeroable::NonZero::<core::integer::u128>,)>, 0>;
libfunc store_temp<core::panics::PanicResult::<(core::zeroable::NonZero::<core::integer::u128>,)>> = store_temp<core::panics::PanicResult::<(core::zeroable::NonZero::<core::integer::u128>,)>>;
libfunc felt252_const<2161814014192570802224> = felt252_const<2161814014192570802224>;
libfunc enum_init<core::panics::PanicResult::<(core::zeroable::NonZero::<core::integer::u128>,)>, 1> = enum_init<core::panics::PanicResult::<(core::zeroable::NonZero::<core::integer::u128>,)>, 1>;
libfunc u128_is_zero = u128_is_zero;
libfunc enum_init<core::option::Option::<core::zeroable::NonZero::<core::integer::u128>>, 1> = enum_init<core::option::Option::<core::zeroable::NonZero::<core::integer::u128>>, 1>;
libfunc store_temp<core::option::Option::<core::zeroable::NonZero::<core::integer::u128>>> = store_temp<core::option::Option::<core::zeroable::NonZero::<core::integer::u128>>>;
libfunc rename<core::option::Option::<core::zeroable::NonZero::<core::integer::u128>>> = rename<core::option::Option::<core::zeroable::NonZero::<core::integer::u128>>>;

struct_construct<Unit>() -> ([0]); // 0
enum_init<core::bool, 1>([0]) -> ([1]); // 1
struct_construct<Unit>() -> ([2]); // 2
enum_init<core::bool, 1>([2]) -> ([3]); // 3
struct_construct<Unit>() -> ([4]); // 4
enum_init<core::bool, 1>([4]) -> ([5]); // 5
struct_construct<Unit>() -> ([6]); // 6
enum_init<core::bool, 1>([6]) -> ([7]); // 7
struct_construct<Unit>() -> ([8]); // 8
enum_init<core::bool, 1>([8]) -> ([9]); // 9
struct_construct<ekubo::types::call_points::CallPoints>([1], [3], [5], [7], [9]) -> ([10]); // 10
store_temp<ekubo::types::call_points::CallPoints>([10]) -> ([11]); // 11
return([11]); // 12
dup<u128>([0]) -> ([0], [2]); // 13
snapshot_take<u128>([2]) -> ([3], [4]); // 14
drop<u128>([3]) -> (); // 15
u128_const<0>() -> ([5]); // 16
snapshot_take<u128>([5]) -> ([6], [7]); // 17
drop<u128>([6]) -> (); // 18
rename<u128>([4]) -> ([8]); // 19
snapshot_take<u128>([8]) -> ([9], [10]); // 20
drop<u128>([9]) -> (); // 21
rename<u128>([7]) -> ([11]); // 22
snapshot_take<u128>([11]) -> ([12], [13]); // 23
drop<u128>([12]) -> (); // 24
rename<u128>([10]) -> ([14]); // 25
rename<u128>([13]) -> ([15]); // 26
u128_eq([14], [15]) { fallthrough() 33() }; // 27
branch_align() -> (); // 28
struct_construct<Unit>() -> ([16]); // 29
enum_init<core::bool, 0>([16]) -> ([17]); // 30
store_temp<core::bool>([17]) -> ([18]); // 31
jump() { 37() }; // 32
branch_align() -> (); // 33
struct_construct<Unit>() -> ([19]); // 34
enum_init<core::bool, 1>([19]) -> ([20]); // 35
store_temp<core::bool>([20]) -> ([18]); // 36
bool_not_impl([18]) -> ([21]); // 37
store_temp<core::bool>([21]) -> ([21]); // 38
bool_and_impl([1], [21]) -> ([22]); // 39
struct_construct<ekubo::types::i129::i129>([0], [22]) -> ([23]); // 40
store_temp<ekubo::types::i129::i129>([23]) -> ([24]); // 41
return([24]); // 42
struct_deconstruct<ekubo::types::i129::i129>([1]) -> ([3], [4]); // 43
snapshot_take<core::bool>([4]) -> ([5], [6]); // 44
struct_deconstruct<ekubo::types::i129::i129>([2]) -> ([7], [8]); // 45
snapshot_take<core::bool>([8]) -> ([9], [10]); // 46
enum_match<core::bool>([6]) { fallthrough([11]) 54([12]) }; // 47
branch_align() -> (); // 48
drop<Unit>([11]) -> (); // 49
rename<core::bool>([10]) -> ([13]); // 50
bool_not_impl([13]) -> ([14]); // 51
store_temp<core::bool>([14]) -> ([15]); // 52
jump() { 58() }; // 53
branch_align() -> (); // 54
drop<Unit>([12]) -> (); // 55
rename<core::bool>([10]) -> ([16]); // 56
store_temp<core::bool>([16]) -> ([15]); // 57
enum_match<core::bool>([15]) { fallthrough([17]) 127([18]) }; // 58
branch_align() -> (); // 59
drop<Unit>([17]) -> (); // 60
dup<u128>([3]) -> ([3], [19]); // 61
dup<u128>([7]) -> ([7], [20]); // 62
u128_overflowing_sub([0], [19], [20]) { fallthrough([21], [22]) 72([23], [24]) }; // 63
branch_align() -> (); // 64
drop<u128>([22]) -> (); // 65
struct_construct<ekubo::types::i129::i129>([3], [5]) -> ([25]); // 66
struct_construct<ekubo::types::i129::i129>([7], [9]) -> ([26]); // 67
struct_construct<Tuple<ekubo::types::i129::i129, ekubo::types::i129::i129>>([25], [26]) -> ([27]); // 68
store_temp<RangeCheck>([21]) -> ([28]); // 69
store_temp<Tuple<ekubo::types::i129::i129, ekubo::types::i129::i129>>([27]) -> ([29]); // 70
jump() { 79() }; // 71
branch_align() -> (); // 72
drop<u128>([24]) -> (); // 73
struct_construct<ekubo::types::i129::i129>([7], [9]) -> ([30]); // 74
struct_construct<ekubo::types::i129::i129>([3], [5]) -> ([31]); // 75
struct_construct<Tuple<ekubo::types::i129::i129, ekubo::types::i129::i129>>([30], [31]) -> ([32]); // 76
store_temp<RangeCheck>([23]) -> ([28]); // 77
store_temp<Tuple<ekubo::types::i129::i129, ekubo::types::i129::i129>>([32]) -> ([29]); // 78
struct_deconstruct<Tuple<ekubo::types::i129::i129, ekubo::types::i129::i129>>([29]) -> ([33], [34]); // 79
struct_deconstruct<ekubo::types::i129::i129>([33]) -> ([35], [36]); // 80
struct_deconstruct<ekubo::types::i129::i129>([34]) -> ([37], [38]); // 81
drop<core::bool>([38]) -> (); // 82
store_temp<RangeCheck>([28]) -> ([41]); // 83
store_temp<u128>([35]) -> ([42]); // 84
store_temp<u128>([37]) -> ([43]); // 85
function_call<user@core::integer::U128Sub::sub>([41], [42], [43]) -> ([39], [40]); // 86
enum_match<core::panics::PanicResult::<(core::integer::u128,)>>([40]) { fallthrough([44]) 121([45]) }; // 87
branch_align() -> (); // 88
struct_deconstruct<Tuple<u128>>([44]) -> ([46]); // 89
dup<u128>([46]) -> ([46], [47]); // 90
snapshot_take<u128>([47]) -> ([48], [49]); // 91
drop<u128>([48]) -> (); // 92
u128_const<0>() -> ([50]); // 93
snapshot_take<u128>([50]) -> ([51], [52]); // 94
drop<u128>([51]) -> (); // 95
rename<u128>([49]) -> ([53]); // 96
snapshot_take<u128>([53]) -> ([54], [55]); // 97
drop<u128>([54]) -> (); // 98
rename<u128>([52]) -> ([56]); // 99
snapshot_take<u128>([56]) -> ([57], [58]); // 100
drop<u128>([57]) -> (); // 101
rename<u128>([55]) -> ([59]); // 102
rename<u128>([58]) -> ([60]); // 103
u128_eq([59], [60]) { fallthrough() 110() }; // 104
branch_align() -> (); // 105
struct_construct<Unit>() -> ([61]); // 106
enum_init<core::bool, 0>([61]) -> ([62]); // 107
store_temp<core::bool>([62]) -> ([63]); // 108
jump() { 114() }; // 109
branch_align() -> (); // 110
struct_construct<Unit>() -> ([64]); // 111
enum_init<core::bool, 1>([64]) -> ([65]); // 112
store_temp<core::bool>([65]) -> ([63]); // 113
bool_not_impl([63]) -> ([66]); // 114
store_temp<core::bool>([66]) -> ([66]); // 115
bool_and_impl([36], [66]) -> ([67]); // 116
struct_construct<ekubo::types::i129::i129>([46], [67]) -> ([68]); // 117
store_temp<RangeCheck>([39]) -> ([69]); // 118
store_temp<ekubo::types::i129::i129>([68]) -> ([70]); // 119
jump() { 167() }; // 120
branch_align() -> (); // 121
drop<core::bool>([36]) -> (); // 122
enum_init<core::panics::PanicResult::<(ekubo::types::i129::i129,)>, 1>([45]) -> ([71]); // 123
store_temp<RangeCheck>([39]) -> ([72]); // 124
store_temp<core::panics::PanicResult::<(ekubo::types::i129::i129,)>>([71]) -> ([73]); // 125
return([72], [73]); // 126
branch_align() -> (); // 127
drop<Unit>([18]) -> (); // 128
drop<core::bool>([9]) -> (); // 129
store_temp<RangeCheck>([0]) -> ([76]); // 130
store_temp<u128>([3]) -> ([77]); // 131
store_temp<u128>([7]) -> ([78]); // 132
function_call<user@core::integer::U128Add::add>([76], [77], [78]) -> ([74], [75]); // 133
enum_match<core::panics::PanicResult::<(core::integer::u128,)>>([75]) { fallthrough([79]) 172([80]) }; // 134
branch_align() -> (); // 135
struct_deconstruct<Tuple<u128>>([79]) -> ([81]); // 136
dup<u128>([81]) -> ([81], [82]); // 137
snapshot_take<u128>([82]) -> ([83], [84]); // 138
drop<u128>([83]) -> (); // 139
u128_const<0>() -> ([85]); // 140
snapshot_take<u128>([85]) -> ([86], [87]); // 141
drop<u128>([86]) -> (); // 142
rename<u128>([84]) -> ([88]); // 143
snapshot_take<u128>([88]) -> ([89], [90]); // 144
drop<u128>([89]) -> (); // 145
rename<u128>([87]) -> ([91]); // 146
snapshot_take<u128>([91]) -> ([92], [93]); // 147
drop<u128>([92]) -> (); // 148
rename<u128>([90]) -> ([94]); // 149
rename<u128>([93]) -> ([95]); // 150
u128_eq([94], [95]) { fallthrough() 157() }; // 151
branch_align() -> (); // 152
struct_construct<Unit>() -> ([96]); // 153
enum_init<core::bool, 0>([96]) -> ([97]); // 154
store_temp<core::bool>([97]) -> ([98]); // 155
jump() { 161() }; // 156
branch_align() -> (); // 157
struct_construct<Unit>() -> ([99]); // 158
enum_init<core::bool, 1>([99]) -> ([100]); // 159
store_temp<core::bool>([100]) -> ([98]); // 160
bool_not_impl([98]) -> ([101]); // 161
store_temp<core::bool>([101]) -> ([101]); // 162
bool_and_impl([5], [101]) -> ([102]); // 163
struct_construct<ekubo::types::i129::i129>([81], [102]) -> ([103]); // 164
store_temp<RangeCheck>([74]) -> ([69]); // 165
store_temp<ekubo::types::i129::i129>([103]) -> ([70]); // 166
struct_construct<Tuple<ekubo::types::i129::i129>>([70]) -> ([104]); // 167
enum_init<core::panics::PanicResult::<(ekubo::types::i129::i129,)>, 0>([104]) -> ([105]); // 168
store_temp<RangeCheck>([69]) -> ([106]); // 169
store_temp<core::panics::PanicResult::<(ekubo::types::i129::i129,)>>([105]) -> ([107]); // 170
return([106], [107]); // 171
branch_align() -> (); // 172
drop<core::bool>([5]) -> (); // 173
enum_init<core::panics::PanicResult::<(ekubo::types::i129::i129,)>, 1>([80]) -> ([108]); // 174
store_temp<RangeCheck>([74]) -> ([109]); // 175
store_temp<core::panics::PanicResult::<(ekubo::types::i129::i129,)>>([108]) -> ([110]); // 176
return([109], [110]); // 177
struct_deconstruct<ekubo::types::i129::i129>([2]) -> ([3], [4]); // 178
bool_not_impl([4]) -> ([5]); // 179
dup<u128>([3]) -> ([3], [6]); // 180
snapshot_take<u128>([6]) -> ([7], [8]); // 181
drop<u128>([7]) -> (); // 182
u128_const<0>() -> ([9]); // 183
snapshot_take<u128>([9]) -> ([10], [11]); // 184
drop<u128>([10]) -> (); // 185
rename<u128>([8]) -> ([12]); // 186
snapshot_take<u128>([12]) -> ([13], [14]); // 187
drop<u128>([13]) -> (); // 188
rename<u128>([11]) -> ([15]); // 189
snapshot_take<u128>([15]) -> ([16], [17]); // 190
drop<u128>([16]) -> (); // 191
rename<u128>([14]) -> ([18]); // 192
rename<u128>([17]) -> ([19]); // 193
store_temp<core::bool>([5]) -> ([5]); // 194
u128_eq([18], [19]) { fallthrough() 201() }; // 195
branch_align() -> (); // 196
struct_construct<Unit>() -> ([20]); // 197
enum_init<core::bool, 0>([20]) -> ([21]); // 198
store_temp<core::bool>([21]) -> ([22]); // 199
jump() { 205() }; // 200
branch_align() -> (); // 201
struct_construct<Unit>() -> ([23]); // 202
enum_init<core::bool, 1>([23]) -> ([24]); // 203
store_temp<core::bool>([24]) -> ([22]); // 204
bool_not_impl([22]) -> ([25]); // 205
store_temp<core::bool>([25]) -> ([25]); // 206
bool_and_impl([5], [25]) -> ([26]); // 207
struct_construct<ekubo::types::i129::i129>([3], [26]) -> ([27]); // 208
store_temp<RangeCheck>([0]) -> ([30]); // 209
store_temp<ekubo::types::i129::i129>([1]) -> ([31]); // 210
store_temp<ekubo::types::i129::i129>([27]) -> ([32]); // 211
function_call<user@ekubo::types::i129::i129_add>([30], [31], [32]) -> ([28], [29]); // 212
enum_match<core::panics::PanicResult::<(ekubo::types::i129::i129,)>>([29]) { fallthrough([33]) 221([34]) }; // 213
branch_align() -> (); // 214
struct_deconstruct<Tuple<ekubo::types::i129::i129>>([33]) -> ([35]); // 215
struct_construct<Tuple<ekubo::types::i129::i129>>([35]) -> ([36]); // 216
enum_init<core::panics::PanicResult::<(ekubo::types::i129::i129,)>, 0>([36]) -> ([37]); // 217
store_temp<RangeCheck>([28]) -> ([38]); // 218
store_temp<core::panics::PanicResult::<(ekubo::types::i129::i129,)>>([37]) -> ([39]); // 219
return([38], [39]); // 220
branch_align() -> (); // 221
enum_init<core::panics::PanicResult::<(ekubo::types::i129::i129,)>, 1>([34]) -> ([40]); // 222
store_temp<RangeCheck>([28]) -> ([41]); // 223
store_temp<core::panics::PanicResult::<(ekubo::types::i129::i129,)>>([40]) -> ([42]); // 224
return([41], [42]); // 225
struct_deconstruct<ekubo::types::i129::i129>([1]) -> ([3], [4]); // 226
struct_deconstruct<ekubo::types::i129::i129>([2]) -> ([5], [6]); // 227
store_temp<RangeCheck>([0]) -> ([9]); // 228
store_temp<u128>([3]) -> ([10]); // 229
store_temp<u128>([5]) -> ([11]); // 230
function_call<user@core::integer::U128Mul::mul>([9], [10], [11]) -> ([7], [8]); // 231
enum_match<core::panics::PanicResult::<(core::integer::u128,)>>([8]) { fallthrough([12]) 270([13]) }; // 232
branch_align() -> (); // 233
bool_xor_impl([4], [6]) -> ([14]); // 234
struct_deconstruct<Tuple<u128>>([12]) -> ([15]); // 235
dup<u128>([15]) -> ([15], [16]); // 236
snapshot_take<u128>([16]) -> ([17], [18]); // 237
drop<u128>([17]) -> (); // 238
u128_const<0>() -> ([19]); // 239
snapshot_take<u128>([19]) -> ([20], [21]); // 240
drop<u128>([20]) -> (); // 241
rename<u128>([18]) -> ([22]); // 242
snapshot_take<u128>([22]) -> ([23], [24]); // 243
drop<u128>([23]) -> (); // 244
rename<u128>([21]) -> ([25]); // 245
snapshot_take<u128>([25]) -> ([26], [27]); // 246
drop<u128>([26]) -> (); // 247
rename<u128>([24]) -> ([28]); // 248
rename<u128>([27]) -> ([29]); // 249
store_temp<core::bool>([14]) -> ([14]); // 250
u128_eq([28], [29]) { fallthrough() 257() }; // 251
branch_align() -> (); // 252
struct_construct<Unit>() -> ([30]); // 253
enum_init<core::bool, 0>([30]) -> ([31]); // 254
store_temp<core::bool>([31]) -> ([32]); // 255
jump() { 261() }; // 256
branch_align() -> (); // 257
struct_construct<Unit>() -> ([33]); // 258
enum_init<core::bool, 1>([33]) -> ([34]); // 259
store_temp<core::bool>([34]) -> ([32]); // 260
bool_not_impl([32]) -> ([35]); // 261
store_temp<core::bool>([35]) -> ([35]); // 262
bool_and_impl([14], [35]) -> ([36]); // 263
struct_construct<ekubo::types::i129::i129>([15], [36]) -> ([37]); // 264
struct_construct<Tuple<ekubo::types::i129::i129>>([37]) -> ([38]); // 265
enum_init<core::panics::PanicResult::<(ekubo::types::i129::i129,)>, 0>([38]) -> ([39]); // 266
store_temp<RangeCheck>([7]) -> ([40]); // 267
store_temp<core::panics::PanicResult::<(ekubo::types::i129::i129,)>>([39]) -> ([41]); // 268
return([40], [41]); // 269
branch_align() -> (); // 270
drop<core::bool>([4]) -> (); // 271
drop<core::bool>([6]) -> (); // 272
enum_init<core::panics::PanicResult::<(ekubo::types::i129::i129,)>, 1>([13]) -> ([42]); // 273
store_temp<RangeCheck>([7]) -> ([43]); // 274
store_temp<core::panics::PanicResult::<(ekubo::types::i129::i129,)>>([42]) -> ([44]); // 275
return([43], [44]); // 276
struct_deconstruct<ekubo::types::i129::i129>([1]) -> ([3], [4]); // 277
struct_deconstruct<ekubo::types::i129::i129>([2]) -> ([5], [6]); // 278
store_temp<RangeCheck>([0]) -> ([9]); // 279
store_temp<u128>([3]) -> ([10]); // 280
store_temp<u128>([5]) -> ([11]); // 281
function_call<user@core::integer::U128Div::div>([9], [10], [11]) -> ([7], [8]); // 282
enum_match<core::panics::PanicResult::<(core::integer::u128,)>>([8]) { fallthrough([12]) 321([13]) }; // 283
branch_align() -> (); // 284
bool_xor_impl([4], [6]) -> ([14]); // 285
struct_deconstruct<Tuple<u128>>([12]) -> ([15]); // 286
dup<u128>([15]) -> ([15], [16]); // 287
snapshot_take<u128>([16]) -> ([17], [18]); // 288
drop<u128>([17]) -> (); // 289
u128_const<0>() -> ([19]); // 290
snapshot_take<u128>([19]) -> ([20], [21]); // 291
drop<u128>([20]) -> (); // 292
rename<u128>([18]) -> ([22]); // 293
snapshot_take<u128>([22]) -> ([23], [24]); // 294
drop<u128>([23]) -> (); // 295
rename<u128>([21]) -> ([25]); // 296
snapshot_take<u128>([25]) -> ([26], [27]); // 297
drop<u128>([26]) -> (); // 298
rename<u128>([24]) -> ([28]); // 299
rename<u128>([27]) -> ([29]); // 300
store_temp<core::bool>([14]) -> ([14]); // 301
u128_eq([28], [29]) { fallthrough() 308() }; // 302
branch_align() -> (); // 303
struct_construct<Unit>() -> ([30]); // 304
enum_init<core::bool, 0>([30]) -> ([31]); // 305
store_temp<core::bool>([31]) -> ([32]); // 306
jump() { 312() }; // 307
branch_align() -> (); // 308
struct_construct<Unit>() -> ([33]); // 309
enum_init<core::bool, 1>([33]) -> ([34]); // 310
store_temp<core::bool>([34]) -> ([32]); // 311
bool_not_impl([32]) -> ([35]); // 312
store_temp<core::bool>([35]) -> ([35]); // 313
bool_and_impl([14], [35]) -> ([36]); // 314
struct_construct<ekubo::types::i129::i129>([15], [36]) -> ([37]); // 315
struct_construct<Tuple<ekubo::types::i129::i129>>([37]) -> ([38]); // 316
enum_init<core::panics::PanicResult::<(ekubo::types::i129::i129,)>, 0>([38]) -> ([39]); // 317
store_temp<RangeCheck>([7]) -> ([40]); // 318
store_temp<core::panics::PanicResult::<(ekubo::types::i129::i129,)>>([39]) -> ([41]); // 319
return([40], [41]); // 320
branch_align() -> (); // 321
drop<core::bool>([4]) -> (); // 322
drop<core::bool>([6]) -> (); // 323
enum_init<core::panics::PanicResult::<(ekubo::types::i129::i129,)>, 1>([13]) -> ([42]); // 324
store_temp<RangeCheck>([7]) -> ([43]); // 325
store_temp<core::panics::PanicResult::<(ekubo::types::i129::i129,)>>([42]) -> ([44]); // 326
return([43], [44]); // 327
dup<ekubo::types::i129::i129>([0]) -> ([0], [2]); // 328
struct_deconstruct<ekubo::types::i129::i129>([2]) -> ([3], [4]); // 329
drop<core::bool>([4]) -> (); // 330
snapshot_take<u128>([3]) -> ([5], [6]); // 331
drop<u128>([5]) -> (); // 332
dup<ekubo::types::i129::i129>([1]) -> ([1], [7]); // 333
struct_deconstruct<ekubo::types::i129::i129>([7]) -> ([8], [9]); // 334
drop<core::bool>([9]) -> (); // 335
snapshot_take<u128>([8]) -> ([10], [11]); // 336
drop<u128>([10]) -> (); // 337
store_temp<u128>([6]) -> ([13]); // 338
store_temp<u128>([11]) -> ([14]); // 339
function_call<user@core::traits::PartialEqSnap::<core::integer::u128, core::integer::U128PartialEq>::eq>([13], [14]) -> ([12]); // 340
dup<ekubo::types::i129::i129>([0]) -> ([0], [15]); // 341
struct_deconstruct<ekubo::types::i129::i129>([15]) -> ([16], [17]); // 342
drop<u128>([16]) -> (); // 343
snapshot_take<core::bool>([17]) -> ([18], [19]); // 344
drop<core::bool>([18]) -> (); // 345
struct_deconstruct<ekubo::types::i129::i129>([1]) -> ([20], [21]); // 346
drop<u128>([20]) -> (); // 347
snapshot_take<core::bool>([21]) -> ([22], [23]); // 348
drop<core::bool>([22]) -> (); // 349
store_temp<core::bool>([19]) -> ([25]); // 350
store_temp<core::bool>([23]) -> ([26]); // 351
function_call<user@core::traits::PartialEqSnap::<core::bool, core::BoolPartialEq>::eq>([25], [26]) -> ([24]); // 352
struct_deconstruct<ekubo::types::i129::i129>([0]) -> ([27], [28]); // 353
drop<core::bool>([28]) -> (); // 354
rename<u128>([27]) -> ([29]); // 355
snapshot_take<u128>([29]) -> ([30], [31]); // 356
drop<u128>([30]) -> (); // 357
u128_const<0>() -> ([32]); // 358
snapshot_take<u128>([32]) -> ([33], [34]); // 359
drop<u128>([33]) -> (); // 360
rename<u128>([31]) -> ([35]); // 361
rename<u128>([34]) -> ([36]); // 362
u128_eq([35], [36]) { fallthrough() 369() }; // 363
branch_align() -> (); // 364
struct_construct<Unit>() -> ([37]); // 365
enum_init<core::bool, 0>([37]) -> ([38]); // 366
store_temp<core::bool>([38]) -> ([39]); // 367
jump() { 373() }; // 368
branch_align() -> (); // 369
struct_construct<Unit>() -> ([40]); // 370
enum_init<core::bool, 1>([40]) -> ([41]); // 371
store_temp<core::bool>([41]) -> ([39]); // 372
bool_or_impl([24], [39]) -> ([42]); // 373
store_temp<core::bool>([42]) -> ([42]); // 374
bool_and_impl([12], [42]) -> ([43]); // 375
store_temp<core::bool>([43]) -> ([44]); // 376
return([44]); // 377
struct_deconstruct<ekubo::types::i129::i129>([1]) -> ([3], [4]); // 378
struct_deconstruct<ekubo::types::i129::i129>([2]) -> ([5], [6]); // 379
dup<core::bool>([6]) -> ([6], [8]); // 380
bool_not_impl([8]) -> ([7]); // 381
dup<core::bool>([4]) -> ([4], [10]); // 382
store_temp<core::bool>([7]) -> ([7]); // 383
bool_and_impl([10], [7]) -> ([9]); // 384
store_temp<core::bool>([9]) -> ([9]); // 385
enum_match<core::bool>([9]) { fallthrough([11]) 497([12]) }; // 386
branch_align() -> (); // 387
drop<Unit>([11]) -> (); // 388
dup<core::bool>([4]) -> ([4], [14]); // 389
bool_not_impl([14]) -> ([13]); // 390
dup<core::bool>([6]) -> ([6], [16]); // 391
store_temp<core::bool>([13]) -> ([13]); // 392
bool_and_impl([13], [16]) -> ([15]); // 393
store_temp<core::bool>([15]) -> ([15]); // 394
enum_match<core::bool>([15]) { fallthrough([17]) 439([18]) }; // 395
branch_align() -> (); // 396
drop<Unit>([17]) -> (); // 397
bool_and_impl([4], [6]) -> ([19]); // 398
store_temp<core::bool>([19]) -> ([19]); // 399
enum_match<core::bool>([19]) { fallthrough([20]) 420([21]) }; // 400
branch_align() -> (); // 401
drop<Unit>([20]) -> (); // 402
u128_overflowing_sub([0], [5], [3]) { fallthrough([22], [23]) 411([24], [25]) }; // 403
branch_align() -> (); // 404
drop<u128>([23]) -> (); // 405
struct_construct<Unit>() -> ([26]); // 406
enum_init<core::bool, 0>([26]) -> ([27]); // 407
store_temp<RangeCheck>([22]) -> ([28]); // 408
store_temp<core::bool>([27]) -> ([29]); // 409
jump() { 417() }; // 410
branch_align() -> (); // 411
drop<u128>([25]) -> (); // 412
struct_construct<Unit>() -> ([30]); // 413
enum_init<core::bool, 1>([30]) -> ([31]); // 414
store_temp<RangeCheck>([24]) -> ([28]); // 415
store_temp<core::bool>([31]) -> ([29]); // 416
rename<RangeCheck>([28]) -> ([32]); // 417
rename<core::bool>([29]) -> ([33]); // 418
return([32], [33]); // 419
branch_align() -> (); // 420
drop<Unit>([21]) -> (); // 421
u128_overflowing_sub([0], [3], [5]) { fallthrough([34], [35]) 430([36], [37]) }; // 422
branch_align() -> (); // 423
drop<u128>([35]) -> (); // 424
struct_construct<Unit>() -> ([38]); // 425
enum_init<core::bool, 0>([38]) -> ([39]); // 426
store_temp<RangeCheck>([34]) -> ([40]); // 427
store_temp<core::bool>([39]) -> ([41]); // 428
jump() { 436() }; // 429
branch_align() -> (); // 430
drop<u128>([37]) -> (); // 431
struct_construct<Unit>() -> ([42]); // 432
enum_init<core::bool, 1>([42]) -> ([43]); // 433
store_temp<RangeCheck>([36]) -> ([40]); // 434
store_temp<core::bool>([43]) -> ([41]); // 435
rename<RangeCheck>([40]) -> ([44]); // 436
rename<core::bool>([41]) -> ([45]); // 437
return([44], [45]); // 438
branch_align() -> (); // 439
drop<Unit>([18]) -> (); // 440
drop<core::bool>([6]) -> (); // 441
drop<core::bool>([4]) -> (); // 442
snapshot_take<u128>([3]) -> ([46], [47]); // 443
drop<u128>([46]) -> (); // 444
u128_const<0>() -> ([48]); // 445
snapshot_take<u128>([48]) -> ([49], [50]); // 446
drop<u128>([49]) -> (); // 447
rename<u128>([47]) -> ([51]); // 448
snapshot_take<u128>([51]) -> ([52], [53]); // 449
drop<u128>([52]) -> (); // 450
rename<u128>([50]) -> ([54]); // 451
snapshot_take<u128>([54]) -> ([55], [56]); // 452
drop<u128>([55]) -> (); // 453
rename<u128>([53]) -> ([57]); // 454
rename<u128>([56]) -> ([58]); // 455
u128_eq([57], [58]) { fallthrough() 462() }; // 456
branch_align() -> (); // 457
struct_construct<Unit>() -> ([59]); // 458
enum_init<core::bool, 0>([59]) -> ([60]); // 459
store_temp<core::bool>([60]) -> ([61]); // 460
jump() { 466() }; // 461
branch_align() -> (); // 462
struct_construct<Unit>() -> ([62]); // 463
enum_init<core::bool, 1>([62]) -> ([63]); // 464
store_temp<core::bool>([63]) -> ([61]); // 465
bool_not_impl([61]) -> ([64]); // 466
snapshot_take<u128>([5]) -> ([65], [66]); // 467
drop<u128>([65]) -> (); // 468
u128_const<0>() -> ([67]); // 469
snapshot_take<u128>([67]) -> ([68], [69]); // 470
drop<u128>([68]) -> (); // 471
rename<u128>([66]) -> ([70]); // 472
snapshot_take<u128>([70]) -> ([71], [72]); // 473
drop<u128>([71]) -> (); // 474
rename<u128>([69]) -> ([73]); // 475
snapshot_take<u128>([73]) -> ([74], [75]); // 476
drop<u128>([74]) -> (); // 477
rename<u128>([72]) -> ([76]); // 478
rename<u128>([75]) -> ([77]); // 479
store_temp<core::bool>([64]) -> ([64]); // 480
u128_eq([76], [77]) { fallthrough() 487() }; // 481
branch_align() -> (); // 482
struct_construct<Unit>() -> ([78]); // 483
enum_init<core::bool, 0>([78]) -> ([79]); // 484
store_temp<core::bool>([79]) -> ([80]); // 485
jump() { 491() }; // 486
branch_align() -> (); // 487
struct_construct<Unit>() -> ([81]); // 488
enum_init<core::bool, 1>([81]) -> ([82]); // 489
store_temp<core::bool>([82]) -> ([80]); // 490
bool_not_impl([80]) -> ([83]); // 491
store_temp<core::bool>([83]) -> ([83]); // 492
bool_or_impl([64], [83]) -> ([84]); // 493
store_temp<RangeCheck>([0]) -> ([85]); // 494
store_temp<core::bool>([84]) -> ([86]); // 495
return([85], [86]); // 496
branch_align() -> (); // 497
drop<Unit>([12]) -> (); // 498
drop<u128>([3]) -> (); // 499
drop<u128>([5]) -> (); // 500
drop<core::bool>([6]) -> (); // 501
drop<core::bool>([4]) -> (); // 502
struct_construct<Unit>() -> ([87]); // 503
enum_init<core::bool, 0>([87]) -> ([88]); // 504
store_temp<RangeCheck>([0]) -> ([89]); // 505
store_temp<core::bool>([88]) -> ([90]); // 506
return([89], [90]); // 507
snapshot_take<ekubo::types::i129::i129>([1]) -> ([3], [4]); // 508
snapshot_take<ekubo::types::i129::i129>([2]) -> ([5], [6]); // 509
dup<ekubo::types::i129::i129>([4]) -> ([4], [7]); // 510
struct_deconstruct<ekubo::types::i129::i129>([7]) -> ([8], [9]); // 511
drop<core::bool>([9]) -> (); // 512
snapshot_take<u128>([8]) -> ([10], [11]); // 513
drop<u128>([10]) -> (); // 514
dup<ekubo::types::i129::i129>([6]) -> ([6], [12]); // 515
struct_deconstruct<ekubo::types::i129::i129>([12]) -> ([13], [14]); // 516
drop<core::bool>([14]) -> (); // 517
snapshot_take<u128>([13]) -> ([15], [16]); // 518
drop<u128>([15]) -> (); // 519
store_temp<u128>([11]) -> ([18]); // 520
store_temp<u128>([16]) -> ([19]); // 521
function_call<user@core::traits::PartialEqSnap::<core::integer::u128, core::integer::U128PartialEq>::eq>([18], [19]) -> ([17]); // 522
dup<ekubo::types::i129::i129>([4]) -> ([4], [20]); // 523
struct_deconstruct<ekubo::types::i129::i129>([20]) -> ([21], [22]); // 524
drop<u128>([21]) -> (); // 525
snapshot_take<core::bool>([22]) -> ([23], [24]); // 526
drop<core::bool>([23]) -> (); // 527
struct_deconstruct<ekubo::types::i129::i129>([6]) -> ([25], [26]); // 528
drop<u128>([25]) -> (); // 529
snapshot_take<core::bool>([26]) -> ([27], [28]); // 530
drop<core::bool>([27]) -> (); // 531
store_temp<core::bool>([24]) -> ([30]); // 532
store_temp<core::bool>([28]) -> ([31]); // 533
function_call<user@core::traits::PartialEqSnap::<core::bool, core::BoolPartialEq>::eq>([30], [31]) -> ([29]); // 534
struct_deconstruct<ekubo::types::i129::i129>([4]) -> ([32], [33]); // 535
drop<core::bool>([33]) -> (); // 536
rename<u128>([32]) -> ([34]); // 537
snapshot_take<u128>([34]) -> ([35], [36]); // 538
drop<u128>([35]) -> (); // 539
u128_const<0>() -> ([37]); // 540
snapshot_take<u128>([37]) -> ([38], [39]); // 541
drop<u128>([38]) -> (); // 542
rename<u128>([36]) -> ([40]); // 543
rename<u128>([39]) -> ([41]); // 544
u128_eq([40], [41]) { fallthrough() 551() }; // 545
branch_align() -> (); // 546
struct_construct<Unit>() -> ([42]); // 547
enum_init<core::bool, 0>([42]) -> ([43]); // 548
store_temp<core::bool>([43]) -> ([44]); // 549
jump() { 555() }; // 550
branch_align() -> (); // 551
struct_construct<Unit>() -> ([45]); // 552
enum_init<core::bool, 1>([45]) -> ([46]); // 553
store_temp<core::bool>([46]) -> ([44]); // 554
bool_or_impl([29], [44]) -> ([47]); // 555
store_temp<core::bool>([47]) -> ([47]); // 556
bool_and_impl([17], [47]) -> ([48]); // 557
store_temp<RangeCheck>([0]) -> ([51]); // 558
store_temp<ekubo::types::i129::i129>([3]) -> ([52]); // 559
store_temp<ekubo::types::i129::i129>([5]) -> ([53]); // 560
function_call<user@ekubo::types::i129::i129_gt>([51], [52], [53]) -> ([49], [50]); // 561
store_temp<core::bool>([48]) -> ([48]); // 562
bool_or_impl([48], [50]) -> ([54]); // 563
store_temp<RangeCheck>([49]) -> ([55]); // 564
store_temp<core::bool>([54]) -> ([56]); // 565
return([55], [56]); // 566
snapshot_take<ekubo::types::i129::i129>([1]) -> ([3], [4]); // 567
snapshot_take<ekubo::types::i129::i129>([2]) -> ([5], [6]); // 568
dup<ekubo::types::i129::i129>([4]) -> ([4], [7]); // 569
struct_deconstruct<ekubo::types::i129::i129>([7]) -> ([8], [9]); // 570
drop<core::bool>([9]) -> (); // 571
snapshot_take<u128>([8]) -> ([10], [11]); // 572
drop<u128>([10]) -> (); // 573
dup<ekubo::types::i129::i129>([6]) -> ([6], [12]); // 574
struct_deconstruct<ekubo::types::i129::i129>([12]) -> ([13], [14]); // 575
drop<core::bool>([14]) -> (); // 576
snapshot_take<u128>([13]) -> ([15], [16]); // 577
drop<u128>([15]) -> (); // 578
store_temp<u128>([11]) -> ([18]); // 579
store_temp<u128>([16]) -> ([19]); // 580
function_call<user@core::traits::PartialEqSnap::<core::integer::u128, core::integer::U128PartialEq>::eq>([18], [19]) -> ([17]); // 581
dup<ekubo::types::i129::i129>([4]) -> ([4], [20]); // 582
struct_deconstruct<ekubo::types::i129::i129>([20]) -> ([21], [22]); // 583
drop<u128>([21]) -> (); // 584
snapshot_take<core::bool>([22]) -> ([23], [24]); // 585
drop<core::bool>([23]) -> (); // 586
struct_deconstruct<ekubo::types::i129::i129>([6]) -> ([25], [26]); // 587
drop<u128>([25]) -> (); // 588
snapshot_take<core::bool>([26]) -> ([27], [28]); // 589
drop<core::bool>([27]) -> (); // 590
store_temp<core::bool>([24]) -> ([30]); // 591
store_temp<core::bool>([28]) -> ([31]); // 592
function_call<user@core::traits::PartialEqSnap::<core::bool, core::BoolPartialEq>::eq>([30], [31]) -> ([29]); // 593
struct_deconstruct<ekubo::types::i129::i129>([4]) -> ([32], [33]); // 594
drop<core::bool>([33]) -> (); // 595
rename<u128>([32]) -> ([34]); // 596
snapshot_take<u128>([34]) -> ([35], [36]); // 597
drop<u128>([35]) -> (); // 598
u128_const<0>() -> ([37]); // 599
snapshot_take<u128>([37]) -> ([38], [39]); // 600
drop<u128>([38]) -> (); // 601
rename<u128>([36]) -> ([40]); // 602
rename<u128>([39]) -> ([41]); // 603
u128_eq([40], [41]) { fallthrough() 610() }; // 604
branch_align() -> (); // 605
struct_construct<Unit>() -> ([42]); // 606
enum_init<core::bool, 0>([42]) -> ([43]); // 607
store_temp<core::bool>([43]) -> ([44]); // 608
jump() { 614() }; // 609
branch_align() -> (); // 610
struct_construct<Unit>() -> ([45]); // 611
enum_init<core::bool, 1>([45]) -> ([46]); // 612
store_temp<core::bool>([46]) -> ([44]); // 613
bool_or_impl([29], [44]) -> ([47]); // 614
store_temp<core::bool>([47]) -> ([47]); // 615
bool_and_impl([17], [47]) -> ([48]); // 616
store_temp<RangeCheck>([0]) -> ([51]); // 617
store_temp<ekubo::types::i129::i129>([3]) -> ([52]); // 618
store_temp<ekubo::types::i129::i129>([5]) -> ([53]); // 619
function_call<user@ekubo::types::i129::i129_gt>([51], [52], [53]) -> ([49], [50]); // 620
store_temp<core::bool>([48]) -> ([48]); // 621
bool_or_impl([48], [50]) -> ([54]); // 622
store_temp<core::bool>([54]) -> ([54]); // 623
bool_not_impl([54]) -> ([55]); // 624
store_temp<RangeCheck>([49]) -> ([56]); // 625
store_temp<core::bool>([55]) -> ([57]); // 626
return([56], [57]); // 627
store_temp<RangeCheck>([0]) -> ([5]); // 628
store_temp<ekubo::types::i129::i129>([1]) -> ([6]); // 629
store_temp<ekubo::types::i129::i129>([2]) -> ([7]); // 630
function_call<user@ekubo::types::i129::i129_gt>([5], [6], [7]) -> ([3], [4]); // 631
bool_not_impl([4]) -> ([8]); // 632
store_temp<RangeCheck>([3]) -> ([9]); // 633
store_temp<core::bool>([8]) -> ([10]); // 634
return([9], [10]); // 635
struct_deconstruct<ekubo::types::i129::i129>([0]) -> ([1], [2]); // 636
bool_not_impl([2]) -> ([3]); // 637
dup<u128>([1]) -> ([1], [4]); // 638
snapshot_take<u128>([4]) -> ([5], [6]); // 639
drop<u128>([5]) -> (); // 640
u128_const<0>() -> ([7]); // 641
snapshot_take<u128>([7]) -> ([8], [9]); // 642
drop<u128>([8]) -> (); // 643
rename<u128>([6]) -> ([10]); // 644
snapshot_take<u128>([10]) -> ([11], [12]); // 645
drop<u128>([11]) -> (); // 646
rename<u128>([9]) -> ([13]); // 647
snapshot_take<u128>([13]) -> ([14], [15]); // 648
drop<u128>([14]) -> (); // 649
rename<u128>([12]) -> ([16]); // 650
rename<u128>([15]) -> ([17]); // 651
store_temp<core::bool>([3]) -> ([3]); // 652
u128_eq([16], [17]) { fallthrough() 659() }; // 653
branch_align() -> (); // 654
struct_construct<Unit>() -> ([18]); // 655
enum_init<core::bool, 0>([18]) -> ([19]); // 656
store_temp<core::bool>([19]) -> ([20]); // 657
jump() { 663() }; // 658
branch_align() -> (); // 659
struct_construct<Unit>() -> ([21]); // 660
enum_init<core::bool, 1>([21]) -> ([22]); // 661
store_temp<core::bool>([22]) -> ([20]); // 662
bool_not_impl([20]) -> ([23]); // 663
store_temp<core::bool>([23]) -> ([23]); // 664
bool_and_impl([3], [23]) -> ([24]); // 665
struct_construct<ekubo::types::i129::i129>([1], [24]) -> ([25]); // 666
store_temp<ekubo::types::i129::i129>([25]) -> ([26]); // 667
return([26]); // 668
u128_overflowing_sub([0], [1], [2]) { fallthrough([3], [4]) 675([5], [6]) }; // 669
branch_align() -> (); // 670
enum_init<core::result::Result::<core::integer::u128, core::integer::u128>, 0>([4]) -> ([7]); // 671
store_temp<RangeCheck>([3]) -> ([8]); // 672
store_temp<core::result::Result::<core::integer::u128, core::integer::u128>>([7]) -> ([9]); // 673
jump() { 679() }; // 674
branch_align() -> (); // 675
enum_init<core::result::Result::<core::integer::u128, core::integer::u128>, 1>([6]) -> ([10]); // 676
store_temp<RangeCheck>([5]) -> ([8]); // 677
store_temp<core::result::Result::<core::integer::u128, core::integer::u128>>([10]) -> ([9]); // 678
felt252_const<39878429859763533771555484554338820190071>() -> ([11]); // 679
rename<core::result::Result::<core::integer::u128, core::integer::u128>>([9]) -> ([13]); // 680
store_temp<felt252>([11]) -> ([14]); // 681
function_call<user@core::result::ResultTraitImpl::<core::integer::u128, core::integer::u128>::expect::<core::integer::u128Drop>>([13], [14]) -> ([12]); // 682
enum_match<core::panics::PanicResult::<(core::integer::u128,)>>([12]) { fallthrough([15]) 691([16]) }; // 683
branch_align() -> (); // 684
struct_deconstruct<Tuple<u128>>([15]) -> ([17]); // 685
struct_construct<Tuple<u128>>([17]) -> ([18]); // 686
enum_init<core::panics::PanicResult::<(core::integer::u128,)>, 0>([18]) -> ([19]); // 687
store_temp<RangeCheck>([8]) -> ([20]); // 688
store_temp<core::panics::PanicResult::<(core::integer::u128,)>>([19]) -> ([21]); // 689
return([20], [21]); // 690
branch_align() -> (); // 691
enum_init<core::panics::PanicResult::<(core::integer::u128,)>, 1>([16]) -> ([22]); // 692
store_temp<RangeCheck>([8]) -> ([23]); // 693
store_temp<core::panics::PanicResult::<(core::integer::u128,)>>([22]) -> ([24]); // 694
return([23], [24]); // 695
u128_overflowing_add([0], [1], [2]) { fallthrough([3], [4]) 702([5], [6]) }; // 696
branch_align() -> (); // 697
enum_init<core::result::Result::<core::integer::u128, core::integer::u128>, 0>([4]) -> ([7]); // 698
store_temp<RangeCheck>([3]) -> ([8]); // 699
store_temp<core::result::Result::<core::integer::u128, core::integer::u128>>([7]) -> ([9]); // 700
jump() { 706() }; // 701
branch_align() -> (); // 702
enum_init<core::result::Result::<core::integer::u128, core::integer::u128>, 1>([6]) -> ([10]); // 703
store_temp<RangeCheck>([5]) -> ([8]); // 704
store_temp<core::result::Result::<core::integer::u128, core::integer::u128>>([10]) -> ([9]); // 705
felt252_const<39878429859757942499084499860145094553463>() -> ([11]); // 706
rename<core::result::Result::<core::integer::u128, core::integer::u128>>([9]) -> ([13]); // 707
store_temp<felt252>([11]) -> ([14]); // 708
function_call<user@core::result::ResultTraitImpl::<core::integer::u128, core::integer::u128>::expect::<core::integer::u128Drop>>([13], [14]) -> ([12]); // 709
enum_match<core::panics::PanicResult::<(core::integer::u128,)>>([12]) { fallthrough([15]) 718([16]) }; // 710
branch_align() -> (); // 711
struct_deconstruct<Tuple<u128>>([15]) -> ([17]); // 712
struct_construct<Tuple<u128>>([17]) -> ([18]); // 713
enum_init<core::panics::PanicResult::<(core::integer::u128,)>, 0>([18]) -> ([19]); // 714
store_temp<RangeCheck>([8]) -> ([20]); // 715
store_temp<core::panics::PanicResult::<(core::integer::u128,)>>([19]) -> ([21]); // 716
return([20], [21]); // 717
branch_align() -> (); // 718
enum_init<core::panics::PanicResult::<(core::integer::u128,)>, 1>([16]) -> ([22]); // 719
store_temp<RangeCheck>([8]) -> ([23]); // 720
store_temp<core::panics::PanicResult::<(core::integer::u128,)>>([22]) -> ([24]); // 721
return([23], [24]); // 722
store_temp<RangeCheck>([0]) -> ([5]); // 723
store_temp<u128>([1]) -> ([6]); // 724
store_temp<u128>([2]) -> ([7]); // 725
function_call<user@core::integer::u128_checked_mul>([5], [6], [7]) -> ([3], [4]); // 726
enum_match<core::option::Option::<core::integer::u128>>([4]) { fallthrough([8]) 734([9]) }; // 727
branch_align() -> (); // 728
struct_construct<Tuple<u128>>([8]) -> ([10]); // 729
enum_init<core::panics::PanicResult::<(core::integer::u128,)>, 0>([10]) -> ([11]); // 730
store_temp<RangeCheck>([3]) -> ([12]); // 731
store_temp<core::panics::PanicResult::<(core::integer::u128,)>>([11]) -> ([13]); // 732
return([12], [13]); // 733
branch_align() -> (); // 734
drop<Unit>([9]) -> (); // 735
array_new<felt252>() -> ([14]); // 736
felt252_const<39878429859761676908720221312622923640695>() -> ([15]); // 737
store_temp<felt252>([15]) -> ([15]); // 738
array_append<felt252>([14], [15]) -> ([16]); // 739
struct_construct<core::panics::Panic>() -> ([17]); // 740
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([17], [16]) -> ([18]); // 741
enum_init<core::panics::PanicResult::<(core::integer::u128,)>, 1>([18]) -> ([19]); // 742
store_temp<RangeCheck>([3]) -> ([20]); // 743
store_temp<core::panics::PanicResult::<(core::integer::u128,)>>([19]) -> ([21]); // 744
return([20], [21]); // 745
store_temp<u128>([2]) -> ([4]); // 746
function_call<user@core::integer::U128TryIntoNonZero::try_into>([4]) -> ([3]); // 747
enum_match<core::panics::PanicResult::<(core::option::Option::<core::zeroable::NonZero::<core::integer::u128>>,)>>([3]) { fallthrough([5]) 773([6]) }; // 748
branch_align() -> (); // 749
struct_deconstruct<Tuple<core::option::Option::<core::zeroable::NonZero::<core::integer::u128>>>>([5]) -> ([7]); // 750
enum_match<core::option::Option::<core::zeroable::NonZero::<core::integer::u128>>>([7]) { fallthrough([8]) 760([9]) }; // 751
branch_align() -> (); // 752
u128_safe_divmod([0], [1], [8]) -> ([10], [11], [12]); // 753
drop<u128>([12]) -> (); // 754
struct_construct<Tuple<u128>>([11]) -> ([13]); // 755
enum_init<core::panics::PanicResult::<(core::integer::u128,)>, 0>([13]) -> ([14]); // 756
store_temp<RangeCheck>([10]) -> ([15]); // 757
store_temp<core::panics::PanicResult::<(core::integer::u128,)>>([14]) -> ([16]); // 758
return([15], [16]); // 759
branch_align() -> (); // 760
drop<Unit>([9]) -> (); // 761
drop<u128>([1]) -> (); // 762
array_new<felt252>() -> ([17]); // 763
felt252_const<5420154128225384396790819266608>() -> ([18]); // 764
store_temp<felt252>([18]) -> ([18]); // 765
array_append<felt252>([17], [18]) -> ([19]); // 766
struct_construct<core::panics::Panic>() -> ([20]); // 767
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([20], [19]) -> ([21]); // 768
enum_init<core::panics::PanicResult::<(core::integer::u128,)>, 1>([21]) -> ([22]); // 769
store_temp<RangeCheck>([0]) -> ([23]); // 770
store_temp<core::panics::PanicResult::<(core::integer::u128,)>>([22]) -> ([24]); // 771
return([23], [24]); // 772
branch_align() -> (); // 773
drop<u128>([1]) -> (); // 774
enum_init<core::panics::PanicResult::<(core::integer::u128,)>, 1>([6]) -> ([25]); // 775
store_temp<RangeCheck>([0]) -> ([26]); // 776
store_temp<core::panics::PanicResult::<(core::integer::u128,)>>([25]) -> ([27]); // 777
return([26], [27]); // 778
rename<u128>([0]) -> ([2]); // 779
rename<u128>([1]) -> ([3]); // 780
rename<u128>([2]) -> ([4]); // 781
rename<u128>([3]) -> ([5]); // 782
u128_eq([4], [5]) { fallthrough() 789() }; // 783
branch_align() -> (); // 784
struct_construct<Unit>() -> ([6]); // 785
enum_init<core::bool, 0>([6]) -> ([7]); // 786
store_temp<core::bool>([7]) -> ([8]); // 787
jump() { 793() }; // 788
branch_align() -> (); // 789
struct_construct<Unit>() -> ([9]); // 790
enum_init<core::bool, 1>([9]) -> ([10]); // 791
store_temp<core::bool>([10]) -> ([8]); // 792
rename<core::bool>([8]) -> ([11]); // 793
return([11]); // 794
rename<core::bool>([0]) -> ([2]); // 795
rename<core::bool>([1]) -> ([3]); // 796
enum_match<core::bool>([2]) { fallthrough([4]) 804([5]) }; // 797
branch_align() -> (); // 798
drop<Unit>([4]) -> (); // 799
rename<core::bool>([3]) -> ([6]); // 800
bool_not_impl([6]) -> ([7]); // 801
store_temp<core::bool>([7]) -> ([8]); // 802
jump() { 808() }; // 803
branch_align() -> (); // 804
drop<Unit>([5]) -> (); // 805
rename<core::bool>([3]) -> ([9]); // 806
store_temp<core::bool>([9]) -> ([8]); // 807
rename<core::bool>([8]) -> ([10]); // 808
return([10]); // 809
enum_match<core::result::Result::<core::integer::u128, core::integer::u128>>([0]) { fallthrough([2]) 817([3]) }; // 810
branch_align() -> (); // 811
drop<felt252>([1]) -> (); // 812
struct_construct<Tuple<u128>>([2]) -> ([4]); // 813
enum_init<core::panics::PanicResult::<(core::integer::u128,)>, 0>([4]) -> ([5]); // 814
store_temp<core::panics::PanicResult::<(core::integer::u128,)>>([5]) -> ([6]); // 815
return([6]); // 816
branch_align() -> (); // 817
drop<u128>([3]) -> (); // 818
array_new<felt252>() -> ([7]); // 819
array_append<felt252>([7], [1]) -> ([8]); // 820
struct_construct<core::panics::Panic>() -> ([9]); // 821
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([9], [8]) -> ([10]); // 822
enum_init<core::panics::PanicResult::<(core::integer::u128,)>, 1>([10]) -> ([11]); // 823
store_temp<core::panics::PanicResult::<(core::integer::u128,)>>([11]) -> ([12]); // 824
return([12]); // 825
u128_guarantee_mul([1], [2]) -> ([3], [4], [5]); // 826
store_temp<RangeCheck>([0]) -> ([8]); // 827
store_temp<U128MulGuarantee>([5]) -> ([9]); // 828
function_call<user@core::integer::U128MulGuaranteeDestruct::destruct>([8], [9]) -> ([6], [7]); // 829
drop<Unit>([7]) -> (); // 830
struct_construct<Tuple<u128, u128>>([3], [4]) -> ([10]); // 831
struct_deconstruct<Tuple<u128, u128>>([10]) -> ([11], [12]); // 832
u128_to_felt252([11]) -> ([13]); // 833
store_temp<felt252>([13]) -> ([13]); // 834
store_temp<u128>([12]) -> ([12]); // 835
felt252_is_zero([13]) { fallthrough() 841([14]) }; // 836
branch_align() -> (); // 837
enum_init<core::option::Option::<core::integer::u128>, 0>([12]) -> ([15]); // 838
store_temp<core::option::Option::<core::integer::u128>>([15]) -> ([16]); // 839
jump() { 847() }; // 840
branch_align() -> (); // 841
drop<NonZero<felt252>>([14]) -> (); // 842
drop<u128>([12]) -> (); // 843
struct_construct<Unit>() -> ([17]); // 844
enum_init<core::option::Option::<core::integer::u128>, 1>([17]) -> ([18]); // 845
store_temp<core::option::Option::<core::integer::u128>>([18]) -> ([16]); // 846
store_temp<RangeCheck>([6]) -> ([19]); // 847
store_temp<core::option::Option::<core::integer::u128>>([16]) -> ([20]); // 848
return([19], [20]); // 849
store_temp<u128>([0]) -> ([2]); // 850
function_call<user@core::integer::u128_as_non_zero>([2]) -> ([1]); // 851
enum_match<core::panics::PanicResult::<(core::zeroable::NonZero::<core::integer::u128>,)>>([1]) { fallthrough([3]) 860([4]) }; // 852
branch_align() -> (); // 853
struct_deconstruct<Tuple<NonZero<u128>>>([3]) -> ([5]); // 854
enum_init<core::option::Option::<core::zeroable::NonZero::<core::integer::u128>>, 0>([5]) -> ([6]); // 855
struct_construct<Tuple<core::option::Option::<core::zeroable::NonZero::<core::integer::u128>>>>([6]) -> ([7]); // 856
enum_init<core::panics::PanicResult::<(core::option::Option::<core::zeroable::NonZero::<core::integer::u128>>,)>, 0>([7]) -> ([8]); // 857
store_temp<core::panics::PanicResult::<(core::option::Option::<core::zeroable::NonZero::<core::integer::u128>>,)>>([8]) -> ([9]); // 858
return([9]); // 859
branch_align() -> (); // 860
enum_init<core::panics::PanicResult::<(core::option::Option::<core::zeroable::NonZero::<core::integer::u128>>,)>, 1>([4]) -> ([10]); // 861
store_temp<core::panics::PanicResult::<(core::option::Option::<core::zeroable::NonZero::<core::integer::u128>>,)>>([10]) -> ([11]); // 862
return([11]); // 863
u128_mul_guarantee_verify([0], [1]) -> ([2]); // 864
struct_construct<Unit>() -> ([3]); // 865
store_temp<RangeCheck>([2]) -> ([4]); // 866
store_temp<Unit>([3]) -> ([5]); // 867
return([4], [5]); // 868
store_temp<u128>([0]) -> ([2]); // 869
function_call<user@core::integer::u128_try_as_non_zero>([2]) -> ([1]); // 870
enum_match<core::option::Option::<core::zeroable::NonZero::<core::integer::u128>>>([1]) { fallthrough([3]) 877([4]) }; // 871
branch_align() -> (); // 872
struct_construct<Tuple<NonZero<u128>>>([3]) -> ([5]); // 873
enum_init<core::panics::PanicResult::<(core::zeroable::NonZero::<core::integer::u128>,)>, 0>([5]) -> ([6]); // 874
store_temp<core::panics::PanicResult::<(core::zeroable::NonZero::<core::integer::u128>,)>>([6]) -> ([7]); // 875
return([7]); // 876
branch_align() -> (); // 877
drop<Unit>([4]) -> (); // 878
array_new<felt252>() -> ([8]); // 879
felt252_const<2161814014192570802224>() -> ([9]); // 880
store_temp<felt252>([9]) -> ([9]); // 881
array_append<felt252>([8], [9]) -> ([10]); // 882
struct_construct<core::panics::Panic>() -> ([11]); // 883
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([11], [10]) -> ([12]); // 884
enum_init<core::panics::PanicResult::<(core::zeroable::NonZero::<core::integer::u128>,)>, 1>([12]) -> ([13]); // 885
store_temp<core::panics::PanicResult::<(core::zeroable::NonZero::<core::integer::u128>,)>>([13]) -> ([14]); // 886
return([14]); // 887
u128_is_zero([0]) { fallthrough() 894([1]) }; // 888
branch_align() -> (); // 889
struct_construct<Unit>() -> ([2]); // 890
enum_init<core::option::Option::<core::zeroable::NonZero::<core::integer::u128>>, 1>([2]) -> ([3]); // 891
store_temp<core::option::Option::<core::zeroable::NonZero::<core::integer::u128>>>([3]) -> ([4]); // 892
jump() { 897() }; // 893
branch_align() -> (); // 894
enum_init<core::option::Option::<core::zeroable::NonZero::<core::integer::u128>>, 0>([1]) -> ([5]); // 895
store_temp<core::option::Option::<core::zeroable::NonZero::<core::integer::u128>>>([5]) -> ([4]); // 896
rename<core::option::Option::<core::zeroable::NonZero::<core::integer::u128>>>([4]) -> ([6]); // 897
return([6]); // 898

ekubo::types::call_points::all_call_points@0() -> (ekubo::types::call_points::CallPoints);
ekubo::types::i129::i129_new@13([0]: u128, [1]: core::bool) -> (ekubo::types::i129::i129);
ekubo::types::i129::i129_add@43([0]: RangeCheck, [1]: ekubo::types::i129::i129, [2]: ekubo::types::i129::i129) -> (RangeCheck, core::panics::PanicResult::<(ekubo::types::i129::i129,)>);
ekubo::types::i129::i129_sub@178([0]: RangeCheck, [1]: ekubo::types::i129::i129, [2]: ekubo::types::i129::i129) -> (RangeCheck, core::panics::PanicResult::<(ekubo::types::i129::i129,)>);
ekubo::types::i129::i129_mul@226([0]: RangeCheck, [1]: ekubo::types::i129::i129, [2]: ekubo::types::i129::i129) -> (RangeCheck, core::panics::PanicResult::<(ekubo::types::i129::i129,)>);
ekubo::types::i129::i129_div@277([0]: RangeCheck, [1]: ekubo::types::i129::i129, [2]: ekubo::types::i129::i129) -> (RangeCheck, core::panics::PanicResult::<(ekubo::types::i129::i129,)>);
ekubo::types::i129::i129_eq@328([0]: ekubo::types::i129::i129, [1]: ekubo::types::i129::i129) -> (core::bool);
ekubo::types::i129::i129_gt@378([0]: RangeCheck, [1]: ekubo::types::i129::i129, [2]: ekubo::types::i129::i129) -> (RangeCheck, core::bool);
ekubo::types::i129::i129_ge@508([0]: RangeCheck, [1]: ekubo::types::i129::i129, [2]: ekubo::types::i129::i129) -> (RangeCheck, core::bool);
ekubo::types::i129::i129_lt@567([0]: RangeCheck, [1]: ekubo::types::i129::i129, [2]: ekubo::types::i129::i129) -> (RangeCheck, core::bool);
ekubo::types::i129::i129_le@628([0]: RangeCheck, [1]: ekubo::types::i129::i129, [2]: ekubo::types::i129::i129) -> (RangeCheck, core::bool);
ekubo::types::i129::i129_neg@636([0]: ekubo::types::i129::i129) -> (ekubo::types::i129::i129);
core::integer::U128Sub::sub@669([0]: RangeCheck, [1]: u128, [2]: u128) -> (RangeCheck, core::panics::PanicResult::<(core::integer::u128,)>);
core::integer::U128Add::add@696([0]: RangeCheck, [1]: u128, [2]: u128) -> (RangeCheck, core::panics::PanicResult::<(core::integer::u128,)>);
core::integer::U128Mul::mul@723([0]: RangeCheck, [1]: u128, [2]: u128) -> (RangeCheck, core::panics::PanicResult::<(core::integer::u128,)>);
core::integer::U128Div::div@746([0]: RangeCheck, [1]: u128, [2]: u128) -> (RangeCheck, core::panics::PanicResult::<(core::integer::u128,)>);
core::traits::PartialEqSnap::<core::integer::u128, core::integer::U128PartialEq>::eq@779([0]: u128, [1]: u128) -> (core::bool);
core::traits::PartialEqSnap::<core::bool, core::BoolPartialEq>::eq@795([0]: core::bool, [1]: core::bool) -> (core::bool);
core::result::ResultTraitImpl::<core::integer::u128, core::integer::u128>::expect::<core::integer::u128Drop>@810([0]: core::result::Result::<core::integer::u128, core::integer::u128>, [1]: felt252) -> (core::panics::PanicResult::<(core::integer::u128,)>);
core::integer::u128_checked_mul@826([0]: RangeCheck, [1]: u128, [2]: u128) -> (RangeCheck, core::option::Option::<core::integer::u128>);
core::integer::U128TryIntoNonZero::try_into@850([0]: u128) -> (core::panics::PanicResult::<(core::option::Option::<core::zeroable::NonZero::<core::integer::u128>>,)>);
core::integer::U128MulGuaranteeDestruct::destruct@864([0]: RangeCheck, [1]: U128MulGuarantee) -> (RangeCheck, Unit);
core::integer::u128_as_non_zero@869([0]: u128) -> (core::panics::PanicResult::<(core::zeroable::NonZero::<core::integer::u128>,)>);
core::integer::u128_try_as_non_zero@888([0]: u128) -> (core::option::Option::<core::zeroable::NonZero::<core::integer::u128>>);
